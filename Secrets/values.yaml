targetSystem: "linux"
datadog:
  # confd:
  #   postgres.yaml: |-
  #     ad_identifiers:
  #       - redis
  #     init_config:
  #     instances:
  #       - host: dev-dealer-admin-postgres-flex-server0.postgres.database.azure.com
  #         port: 6379
  #         username: datadog
  #         password: ENC[file@/etc/secret-volume/redis_password]
  apiKeyExistingSecret: datadog-agent
  clusterName: mini

  secretBackend:
    # Legacy script
    # command: "/readsecret.py"
    command: "/readsecret_multiple_providers.sh"
    #Required for Reading from Volume using legacy script
    # arguments: /etc/secret-volume

  # Disabling Kubelet verification for minikube
  kubelet:
    tlsVerify: false

  kubeStateMetricsEnabled: false
  kubeStateMetricsCore:
    enabled: true

  orchestratorExplorer:
    enabled: true
  logs:
    enabled: true
    containerCollectAll: false

  apm:
    socketEnabled: false
    portEnabled: false
  processAgent:
    enabled: true
    processCollection: false
  otlp:
    receiver:
      protocols:
        # datadog.otlp.receiver.protocols.http - OTLP/HTTP configuration
        http:
          # datadog.otlp.receiver.protocols.http.enabled -- Enable the OTLP/HTTP endpoint
          enabled: true
          # datadog.otlp.receiver.protocols.http.endpoint -- OTLP/HTTP endpoint
          endpoint: "0.0.0.0:4318"

  clusterChecks:
    enabled: true

  # Ignoring some problematic integrations on minikube
  ignoreAutoConfig:
    - etcd
    - kube_controller_manager 
    - kube_scheduler 

clusterAgent:
  enabled: true 
  confd:
    postgres.yaml: |-
      cluster_check: true
      init_config:
      instances:
        - host: someDB
          port: 6379
          username: datadog
          password: ENC[file@/etc/secret-volume/redis_password]

agents:
  volumes:
    - name: secret-volume
      secret:
        secretName: redis-secret
  volumeMounts:
  - name: secret-volume
    mountPath: /etc/secret-volume
